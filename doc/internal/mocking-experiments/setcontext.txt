
# Manually analysed from objdump -d disassembly
# at call
# %ebp is the caller's base pointer
# %esp points to the stack frame which is
#     %esp+0	return address
#     %esp+4    ucontext_t *uc

0003c200 <setcontext>:
   3c200:       8b 44 24 04             mov    0x4(%esp),%eax
# %eax = ucontext_t *uc
   3c204:       53                      push   %ebx
# save caller's base pointer on the stack, presumably in case we want to return
   3c205:       31 d2                   xor    %edx,%edx
# %edx = 0
# eflags.cf = 0
# eflags.of = 0
# eflags.zf = 1

   3c207:       8d 48 6c                lea    0x6c(%eax),%ecx   # %ecx = &uc->uc_sigmask
   3c20a:       bb 02 00 00 00          mov    $0x2,%ebx
   3c20f:       b8 7e 00 00 00          mov    $0x7e,%eax
   3c214:       65 ff 15 10 00 00 00    call   *%gs:0x10
# this will be some kind of wacky system gate thing to do
# a system call, args are (__NR_sigprocmask, SIG_SETMASK, &uc->uc_sigmask)
# return value will be in %eax 
   3c21b:       5b                      pop    %ebx
# pop this again.  maybe we just did it for the syscall?  whatever.

   3c21c:       3d 01 f0 ff ff          cmp    $0xfffff001,%eax
   3c221:       73 2b                   jae    .L1	# 3c24e <setcontext+0x4e>

   3c223:       8b 44 24 04             mov    0x4(%esp),%eax
# %eax = ucontext_t *uc
   3c227:       8b 48 60                mov    0x60(%eax),%ecx
   3c22a:       d9 21                   fldenv (%ecx)
# load floating point state from uc->uc_mcontext.fpregs


# 0x14 is gregs[0]

  REG_GS = 0,	0x14
  REG_FS,	0x18
  REG_ES,	0x1c
  REG_DS,	0x20
  REG_EDI,	0x24
  REG_ESI,	0x28
  REG_EBP,	0x2c
  REG_ESP,	0x30
  REG_EBX,	0x34
  REG_EDX,	0x38
  REG_ECX,	0x3c
  REG_EAX,	0x40
  REG_TRAPNO,	0x44
  REG_ERR,	0x48
  REG_EIP,	0x4c
  REG_CS,	0x50
  REG_EFL,	0x54
  REG_UESP,	0x58
  REG_SS	0x5c



   3c22c:       8b 48 18                mov    0x18(%eax),%ecx
   3c22f:       8e e1                   mov    %ecx,%fs
# %fs = uc->uc_mcontext.gregs[REG_FS]

   3c231:       8b 48 4c                mov    0x4c(%eax),%ecx
   3c234:       8b 60 30                mov    0x30(%eax),%esp
   3c237:       51                      push   %ecx
# %esp = uc->uc_mcontext.gregs[REG_ESP]
# push uc->uc_mcontext.gregs[REG_EIP]
# we'll be popping that off again when we 'ret' later

   3c238:       8b 78 24                mov    0x24(%eax),%edi
# %edi = uc->uc_mcontext.gregs[REG_EDI]
   3c23b:       8b 70 28                mov    0x28(%eax),%esi
# %esi = uc->uc_mcontext.gregs[REG_ESI]
   3c23e:       8b 68 2c                mov    0x2c(%eax),%ebp
# %ebp = uc->uc_mcontext.gregs[REG_EBP]
   3c241:       8b 58 34                mov    0x34(%eax),%ebx
# %ebx = uc->uc_mcontext.gregs[REG_EBX]
   3c244:       8b 50 38                mov    0x38(%eax),%edx
# %edx = uc->uc_mcontext.gregs[REG_EDX]
   3c247:       8b 48 3c                mov    0x3c(%eax),%ecx
# %ecx = uc->uc_mcontext.gregs[REG_ECX]
   3c24a:       8b 40 40                mov    0x40(%eax),%eax
# %eax = uc->uc_mcontext.gregs[REG_EAX]
.L2:
   3c24d:       c3                      ret    

.L1:
# we get here if the sigprocmask() failed
   3c24e:       e8 22 85 0e 00          call   124775 <__frame_state_for+0xd95>
   3c253:       81 c1 a1 2d 12 00       add    $0x122da1,%ecx
   3c259:       8b 89 d4 ff ff ff       mov    -0x2c(%ecx),%ecx
   3c25f:       31 d2                   xor    %edx,%edx
   3c261:       29 c2                   sub    %eax,%edx
   3c263:       65 89 11                mov    %edx,%gs:(%ecx)

   3c266:       83 c8 ff                or     $0xffffffff,%eax
   3c269:       eb e2                   jmp    .L2	# 3c24d <setcontext+0x4d>
# return -1
   3c26b:       90                      nop    
   3c26c:       90                      nop    
   3c26d:       90                      nop    
   3c26e:       90                      nop    
   3c26f:       90                      nop    


